// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: mgw.proto

#include "mgw.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_mgw_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Device_mgw_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_mgw_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ReqResult_mgw_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_mgw_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_StartStream_mgw_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_mgw_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Stream_mgw_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_mgw_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_StreamInfo_mgw_2eproto;
namespace mgw {
class DeviceDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Device> _instance;
} _Device_default_instance_;
class StreamDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Stream> _instance;
} _Stream_default_instance_;
class StartStreamDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<StartStream> _instance;
} _StartStream_default_instance_;
class ReqResultDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ReqResult> _instance;
} _ReqResult_default_instance_;
class StreamInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<StreamInfo> _instance;
} _StreamInfo_default_instance_;
class MgwMsgDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MgwMsg> _instance;
} _MgwMsg_default_instance_;
}  // namespace mgw
static void InitDefaultsscc_info_Device_mgw_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mgw::_Device_default_instance_;
    new (ptr) ::mgw::Device();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Device_mgw_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Device_mgw_2eproto}, {}};

static void InitDefaultsscc_info_MgwMsg_mgw_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mgw::_MgwMsg_default_instance_;
    new (ptr) ::mgw::MgwMsg();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_MgwMsg_mgw_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_MgwMsg_mgw_2eproto}, {
      &scc_info_StartStream_mgw_2eproto.base,
      &scc_info_ReqResult_mgw_2eproto.base,
      &scc_info_StreamInfo_mgw_2eproto.base,}};

static void InitDefaultsscc_info_ReqResult_mgw_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mgw::_ReqResult_default_instance_;
    new (ptr) ::mgw::ReqResult();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ReqResult_mgw_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ReqResult_mgw_2eproto}, {}};

static void InitDefaultsscc_info_StartStream_mgw_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mgw::_StartStream_default_instance_;
    new (ptr) ::mgw::StartStream();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_StartStream_mgw_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_StartStream_mgw_2eproto}, {
      &scc_info_Device_mgw_2eproto.base,
      &scc_info_Stream_mgw_2eproto.base,}};

static void InitDefaultsscc_info_Stream_mgw_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mgw::_Stream_default_instance_;
    new (ptr) ::mgw::Stream();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Stream_mgw_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Stream_mgw_2eproto}, {}};

static void InitDefaultsscc_info_StreamInfo_mgw_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mgw::_StreamInfo_default_instance_;
    new (ptr) ::mgw::StreamInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_StreamInfo_mgw_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_StreamInfo_mgw_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_mgw_2eproto[6];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_mgw_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_mgw_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_mgw_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mgw::Device, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mgw::Device, type_),
  PROTOBUF_FIELD_OFFSET(::mgw::Device, sn_),
  PROTOBUF_FIELD_OFFSET(::mgw::Device, token_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mgw::Stream, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mgw::Stream, enable_),
  PROTOBUF_FIELD_OFFSET(::mgw::Stream, src_channel_),
  PROTOBUF_FIELD_OFFSET(::mgw::Stream, out_channel_),
  PROTOBUF_FIELD_OFFSET(::mgw::Stream, uri_),
  PROTOBUF_FIELD_OFFSET(::mgw::Stream, code_),
  PROTOBUF_FIELD_OFFSET(::mgw::Stream, username_),
  PROTOBUF_FIELD_OFFSET(::mgw::Stream, password_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mgw::StartStream, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mgw::StartStream, device_),
  PROTOBUF_FIELD_OFFSET(::mgw::StartStream, stream_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mgw::ReqResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mgw::StreamInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mgw::MgwMsg, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::mgw::MgwMsg, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::mgw::MgwMsg, message_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::mgw::Device)},
  { 8, -1, sizeof(::mgw::Stream)},
  { 20, -1, sizeof(::mgw::StartStream)},
  { 27, -1, sizeof(::mgw::ReqResult)},
  { 32, -1, sizeof(::mgw::StreamInfo)},
  { 37, -1, sizeof(::mgw::MgwMsg)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mgw::_Device_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mgw::_Stream_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mgw::_StartStream_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mgw::_ReqResult_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mgw::_StreamInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mgw::_MgwMsg_default_instance_),
};

const char descriptor_table_protodef_mgw_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\tmgw.proto\022\003mgw\"1\n\006Device\022\014\n\004type\030\001 \001(\t"
  "\022\n\n\002sn\030\002 \001(\t\022\r\n\005token\030\003 \001(\t\"\201\001\n\006Stream\022\016"
  "\n\006enable\030\001 \001(\010\022\023\n\013src_channel\030\002 \001(\005\022\023\n\013o"
  "ut_channel\030\003 \001(\005\022\013\n\003uri\030\004 \001(\t\022\014\n\004code\030\005 "
  "\001(\t\022\020\n\010username\030\006 \001(\t\022\020\n\010password\030\007 \001(\t\""
  "G\n\013StartStream\022\033\n\006device\030\001 \001(\0132\013.mgw.Dev"
  "ice\022\033\n\006stream\030\002 \001(\0132\013.mgw.Stream\"\013\n\tReqR"
  "esult\"\014\n\nStreamInfo\"\207\001\n\006MgwMsg\022(\n\014start_"
  "stream\030\024 \001(\0132\020.mgw.StartStreamH\000\022 \n\006resu"
  "lt\030\025 \001(\0132\016.mgw.ReqResultH\000\022&\n\013stream_inf"
  "o\030\026 \001(\0132\017.mgw.StreamInfoH\000B\t\n\007messageb\006p"
  "roto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_mgw_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_mgw_2eproto_sccs[6] = {
  &scc_info_Device_mgw_2eproto.base,
  &scc_info_MgwMsg_mgw_2eproto.base,
  &scc_info_ReqResult_mgw_2eproto.base,
  &scc_info_StartStream_mgw_2eproto.base,
  &scc_info_Stream_mgw_2eproto.base,
  &scc_info_StreamInfo_mgw_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_mgw_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_mgw_2eproto = {
  false, false, descriptor_table_protodef_mgw_2eproto, "mgw.proto", 445,
  &descriptor_table_mgw_2eproto_once, descriptor_table_mgw_2eproto_sccs, descriptor_table_mgw_2eproto_deps, 6, 0,
  schemas, file_default_instances, TableStruct_mgw_2eproto::offsets,
  file_level_metadata_mgw_2eproto, 6, file_level_enum_descriptors_mgw_2eproto, file_level_service_descriptors_mgw_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_mgw_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_mgw_2eproto)), true);
namespace mgw {

// ===================================================================

class Device::_Internal {
 public:
};

Device::Device(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mgw.Device)
}
Device::Device(const Device& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_type().empty()) {
    type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_type(), 
      GetArena());
  }
  sn_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_sn().empty()) {
    sn_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_sn(), 
      GetArena());
  }
  token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_token().empty()) {
    token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_token(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:mgw.Device)
}

void Device::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Device_mgw_2eproto.base);
  type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  sn_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

Device::~Device() {
  // @@protoc_insertion_point(destructor:mgw.Device)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Device::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  type_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  sn_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  token_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Device::ArenaDtor(void* object) {
  Device* _this = reinterpret_cast< Device* >(object);
  (void)_this;
}
void Device::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Device::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Device& Device::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Device_mgw_2eproto.base);
  return *internal_default_instance();
}


void Device::Clear() {
// @@protoc_insertion_point(message_clear_start:mgw.Device)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  type_.ClearToEmpty();
  sn_.ClearToEmpty();
  token_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Device::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_type();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mgw.Device.type"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string sn = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_sn();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mgw.Device.sn"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string token = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_token();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mgw.Device.token"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Device::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mgw.Device)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string type = 1;
  if (this->type().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_type().data(), static_cast<int>(this->_internal_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "mgw.Device.type");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_type(), target);
  }

  // string sn = 2;
  if (this->sn().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_sn().data(), static_cast<int>(this->_internal_sn().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "mgw.Device.sn");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_sn(), target);
  }

  // string token = 3;
  if (this->token().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_token().data(), static_cast<int>(this->_internal_token().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "mgw.Device.token");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_token(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mgw.Device)
  return target;
}

size_t Device::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mgw.Device)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string type = 1;
  if (this->type().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_type());
  }

  // string sn = 2;
  if (this->sn().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_sn());
  }

  // string token = 3;
  if (this->token().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_token());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Device::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mgw.Device)
  GOOGLE_DCHECK_NE(&from, this);
  const Device* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Device>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mgw.Device)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mgw.Device)
    MergeFrom(*source);
  }
}

void Device::MergeFrom(const Device& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mgw.Device)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.type().size() > 0) {
    _internal_set_type(from._internal_type());
  }
  if (from.sn().size() > 0) {
    _internal_set_sn(from._internal_sn());
  }
  if (from.token().size() > 0) {
    _internal_set_token(from._internal_token());
  }
}

void Device::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mgw.Device)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Device::CopyFrom(const Device& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mgw.Device)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Device::IsInitialized() const {
  return true;
}

void Device::InternalSwap(Device* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  type_.Swap(&other->type_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  sn_.Swap(&other->sn_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  token_.Swap(&other->token_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata Device::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Stream::_Internal {
 public:
};

Stream::Stream(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mgw.Stream)
}
Stream::Stream(const Stream& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  uri_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_uri().empty()) {
    uri_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_uri(), 
      GetArena());
  }
  code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_code().empty()) {
    code_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_code(), 
      GetArena());
  }
  username_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_username().empty()) {
    username_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_username(), 
      GetArena());
  }
  password_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_password().empty()) {
    password_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_password(), 
      GetArena());
  }
  ::memcpy(&enable_, &from.enable_,
    static_cast<size_t>(reinterpret_cast<char*>(&out_channel_) -
    reinterpret_cast<char*>(&enable_)) + sizeof(out_channel_));
  // @@protoc_insertion_point(copy_constructor:mgw.Stream)
}

void Stream::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Stream_mgw_2eproto.base);
  uri_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  code_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  username_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  password_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&enable_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&out_channel_) -
      reinterpret_cast<char*>(&enable_)) + sizeof(out_channel_));
}

Stream::~Stream() {
  // @@protoc_insertion_point(destructor:mgw.Stream)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Stream::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  uri_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  code_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  username_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  password_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Stream::ArenaDtor(void* object) {
  Stream* _this = reinterpret_cast< Stream* >(object);
  (void)_this;
}
void Stream::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Stream::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Stream& Stream::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Stream_mgw_2eproto.base);
  return *internal_default_instance();
}


void Stream::Clear() {
// @@protoc_insertion_point(message_clear_start:mgw.Stream)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  uri_.ClearToEmpty();
  code_.ClearToEmpty();
  username_.ClearToEmpty();
  password_.ClearToEmpty();
  ::memset(&enable_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&out_channel_) -
      reinterpret_cast<char*>(&enable_)) + sizeof(out_channel_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Stream::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool enable = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          enable_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 src_channel = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          src_channel_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 out_channel = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          out_channel_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string uri = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_uri();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mgw.Stream.uri"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string code = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_code();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mgw.Stream.code"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string username = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_username();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mgw.Stream.username"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string password = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_password();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "mgw.Stream.password"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Stream::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mgw.Stream)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool enable = 1;
  if (this->enable() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_enable(), target);
  }

  // int32 src_channel = 2;
  if (this->src_channel() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_src_channel(), target);
  }

  // int32 out_channel = 3;
  if (this->out_channel() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_out_channel(), target);
  }

  // string uri = 4;
  if (this->uri().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_uri().data(), static_cast<int>(this->_internal_uri().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "mgw.Stream.uri");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_uri(), target);
  }

  // string code = 5;
  if (this->code().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_code().data(), static_cast<int>(this->_internal_code().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "mgw.Stream.code");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_code(), target);
  }

  // string username = 6;
  if (this->username().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_username().data(), static_cast<int>(this->_internal_username().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "mgw.Stream.username");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_username(), target);
  }

  // string password = 7;
  if (this->password().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_password().data(), static_cast<int>(this->_internal_password().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "mgw.Stream.password");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_password(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mgw.Stream)
  return target;
}

size_t Stream::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mgw.Stream)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string uri = 4;
  if (this->uri().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_uri());
  }

  // string code = 5;
  if (this->code().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_code());
  }

  // string username = 6;
  if (this->username().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_username());
  }

  // string password = 7;
  if (this->password().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_password());
  }

  // bool enable = 1;
  if (this->enable() != 0) {
    total_size += 1 + 1;
  }

  // int32 src_channel = 2;
  if (this->src_channel() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_src_channel());
  }

  // int32 out_channel = 3;
  if (this->out_channel() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_out_channel());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Stream::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mgw.Stream)
  GOOGLE_DCHECK_NE(&from, this);
  const Stream* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Stream>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mgw.Stream)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mgw.Stream)
    MergeFrom(*source);
  }
}

void Stream::MergeFrom(const Stream& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mgw.Stream)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.uri().size() > 0) {
    _internal_set_uri(from._internal_uri());
  }
  if (from.code().size() > 0) {
    _internal_set_code(from._internal_code());
  }
  if (from.username().size() > 0) {
    _internal_set_username(from._internal_username());
  }
  if (from.password().size() > 0) {
    _internal_set_password(from._internal_password());
  }
  if (from.enable() != 0) {
    _internal_set_enable(from._internal_enable());
  }
  if (from.src_channel() != 0) {
    _internal_set_src_channel(from._internal_src_channel());
  }
  if (from.out_channel() != 0) {
    _internal_set_out_channel(from._internal_out_channel());
  }
}

void Stream::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mgw.Stream)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Stream::CopyFrom(const Stream& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mgw.Stream)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Stream::IsInitialized() const {
  return true;
}

void Stream::InternalSwap(Stream* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  uri_.Swap(&other->uri_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  code_.Swap(&other->code_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  username_.Swap(&other->username_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  password_.Swap(&other->password_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Stream, out_channel_)
      + sizeof(Stream::out_channel_)
      - PROTOBUF_FIELD_OFFSET(Stream, enable_)>(
          reinterpret_cast<char*>(&enable_),
          reinterpret_cast<char*>(&other->enable_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Stream::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class StartStream::_Internal {
 public:
  static const ::mgw::Device& device(const StartStream* msg);
  static const ::mgw::Stream& stream(const StartStream* msg);
};

const ::mgw::Device&
StartStream::_Internal::device(const StartStream* msg) {
  return *msg->device_;
}
const ::mgw::Stream&
StartStream::_Internal::stream(const StartStream* msg) {
  return *msg->stream_;
}
StartStream::StartStream(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mgw.StartStream)
}
StartStream::StartStream(const StartStream& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_device()) {
    device_ = new ::mgw::Device(*from.device_);
  } else {
    device_ = nullptr;
  }
  if (from._internal_has_stream()) {
    stream_ = new ::mgw::Stream(*from.stream_);
  } else {
    stream_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:mgw.StartStream)
}

void StartStream::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_StartStream_mgw_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&device_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&stream_) -
      reinterpret_cast<char*>(&device_)) + sizeof(stream_));
}

StartStream::~StartStream() {
  // @@protoc_insertion_point(destructor:mgw.StartStream)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void StartStream::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete device_;
  if (this != internal_default_instance()) delete stream_;
}

void StartStream::ArenaDtor(void* object) {
  StartStream* _this = reinterpret_cast< StartStream* >(object);
  (void)_this;
}
void StartStream::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void StartStream::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const StartStream& StartStream::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_StartStream_mgw_2eproto.base);
  return *internal_default_instance();
}


void StartStream::Clear() {
// @@protoc_insertion_point(message_clear_start:mgw.StartStream)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && device_ != nullptr) {
    delete device_;
  }
  device_ = nullptr;
  if (GetArena() == nullptr && stream_ != nullptr) {
    delete stream_;
  }
  stream_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StartStream::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .mgw.Device device = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_device(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .mgw.Stream stream = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_stream(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* StartStream::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mgw.StartStream)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .mgw.Device device = 1;
  if (this->has_device()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::device(this), target, stream);
  }

  // .mgw.Stream stream = 2;
  if (this->has_stream()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::stream(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mgw.StartStream)
  return target;
}

size_t StartStream::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mgw.StartStream)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .mgw.Device device = 1;
  if (this->has_device()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *device_);
  }

  // .mgw.Stream stream = 2;
  if (this->has_stream()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *stream_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StartStream::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mgw.StartStream)
  GOOGLE_DCHECK_NE(&from, this);
  const StartStream* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<StartStream>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mgw.StartStream)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mgw.StartStream)
    MergeFrom(*source);
  }
}

void StartStream::MergeFrom(const StartStream& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mgw.StartStream)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_device()) {
    _internal_mutable_device()->::mgw::Device::MergeFrom(from._internal_device());
  }
  if (from.has_stream()) {
    _internal_mutable_stream()->::mgw::Stream::MergeFrom(from._internal_stream());
  }
}

void StartStream::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mgw.StartStream)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StartStream::CopyFrom(const StartStream& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mgw.StartStream)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StartStream::IsInitialized() const {
  return true;
}

void StartStream::InternalSwap(StartStream* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(StartStream, stream_)
      + sizeof(StartStream::stream_)
      - PROTOBUF_FIELD_OFFSET(StartStream, device_)>(
          reinterpret_cast<char*>(&device_),
          reinterpret_cast<char*>(&other->device_));
}

::PROTOBUF_NAMESPACE_ID::Metadata StartStream::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ReqResult::_Internal {
 public:
};

ReqResult::ReqResult(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mgw.ReqResult)
}
ReqResult::ReqResult(const ReqResult& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:mgw.ReqResult)
}

void ReqResult::SharedCtor() {
}

ReqResult::~ReqResult() {
  // @@protoc_insertion_point(destructor:mgw.ReqResult)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ReqResult::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ReqResult::ArenaDtor(void* object) {
  ReqResult* _this = reinterpret_cast< ReqResult* >(object);
  (void)_this;
}
void ReqResult::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ReqResult::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ReqResult& ReqResult::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ReqResult_mgw_2eproto.base);
  return *internal_default_instance();
}


void ReqResult::Clear() {
// @@protoc_insertion_point(message_clear_start:mgw.ReqResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ReqResult::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ReqResult::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mgw.ReqResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mgw.ReqResult)
  return target;
}

size_t ReqResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mgw.ReqResult)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReqResult::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mgw.ReqResult)
  GOOGLE_DCHECK_NE(&from, this);
  const ReqResult* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ReqResult>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mgw.ReqResult)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mgw.ReqResult)
    MergeFrom(*source);
  }
}

void ReqResult::MergeFrom(const ReqResult& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mgw.ReqResult)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void ReqResult::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mgw.ReqResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqResult::CopyFrom(const ReqResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mgw.ReqResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqResult::IsInitialized() const {
  return true;
}

void ReqResult::InternalSwap(ReqResult* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ReqResult::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class StreamInfo::_Internal {
 public:
};

StreamInfo::StreamInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mgw.StreamInfo)
}
StreamInfo::StreamInfo(const StreamInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:mgw.StreamInfo)
}

void StreamInfo::SharedCtor() {
}

StreamInfo::~StreamInfo() {
  // @@protoc_insertion_point(destructor:mgw.StreamInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void StreamInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void StreamInfo::ArenaDtor(void* object) {
  StreamInfo* _this = reinterpret_cast< StreamInfo* >(object);
  (void)_this;
}
void StreamInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void StreamInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const StreamInfo& StreamInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_StreamInfo_mgw_2eproto.base);
  return *internal_default_instance();
}


void StreamInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:mgw.StreamInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StreamInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* StreamInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mgw.StreamInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mgw.StreamInfo)
  return target;
}

size_t StreamInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mgw.StreamInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StreamInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mgw.StreamInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const StreamInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<StreamInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mgw.StreamInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mgw.StreamInfo)
    MergeFrom(*source);
  }
}

void StreamInfo::MergeFrom(const StreamInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mgw.StreamInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void StreamInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mgw.StreamInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StreamInfo::CopyFrom(const StreamInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mgw.StreamInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StreamInfo::IsInitialized() const {
  return true;
}

void StreamInfo::InternalSwap(StreamInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata StreamInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class MgwMsg::_Internal {
 public:
  static const ::mgw::StartStream& start_stream(const MgwMsg* msg);
  static const ::mgw::ReqResult& result(const MgwMsg* msg);
  static const ::mgw::StreamInfo& stream_info(const MgwMsg* msg);
};

const ::mgw::StartStream&
MgwMsg::_Internal::start_stream(const MgwMsg* msg) {
  return *msg->message_.start_stream_;
}
const ::mgw::ReqResult&
MgwMsg::_Internal::result(const MgwMsg* msg) {
  return *msg->message_.result_;
}
const ::mgw::StreamInfo&
MgwMsg::_Internal::stream_info(const MgwMsg* msg) {
  return *msg->message_.stream_info_;
}
void MgwMsg::set_allocated_start_stream(::mgw::StartStream* start_stream) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_message();
  if (start_stream) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(start_stream);
    if (message_arena != submessage_arena) {
      start_stream = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, start_stream, submessage_arena);
    }
    set_has_start_stream();
    message_.start_stream_ = start_stream;
  }
  // @@protoc_insertion_point(field_set_allocated:mgw.MgwMsg.start_stream)
}
void MgwMsg::set_allocated_result(::mgw::ReqResult* result) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_message();
  if (result) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(result);
    if (message_arena != submessage_arena) {
      result = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, result, submessage_arena);
    }
    set_has_result();
    message_.result_ = result;
  }
  // @@protoc_insertion_point(field_set_allocated:mgw.MgwMsg.result)
}
void MgwMsg::set_allocated_stream_info(::mgw::StreamInfo* stream_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_message();
  if (stream_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(stream_info);
    if (message_arena != submessage_arena) {
      stream_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, stream_info, submessage_arena);
    }
    set_has_stream_info();
    message_.stream_info_ = stream_info;
  }
  // @@protoc_insertion_point(field_set_allocated:mgw.MgwMsg.stream_info)
}
MgwMsg::MgwMsg(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:mgw.MgwMsg)
}
MgwMsg::MgwMsg(const MgwMsg& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_message();
  switch (from.message_case()) {
    case kStartStream: {
      _internal_mutable_start_stream()->::mgw::StartStream::MergeFrom(from._internal_start_stream());
      break;
    }
    case kResult: {
      _internal_mutable_result()->::mgw::ReqResult::MergeFrom(from._internal_result());
      break;
    }
    case kStreamInfo: {
      _internal_mutable_stream_info()->::mgw::StreamInfo::MergeFrom(from._internal_stream_info());
      break;
    }
    case MESSAGE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:mgw.MgwMsg)
}

void MgwMsg::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MgwMsg_mgw_2eproto.base);
  clear_has_message();
}

MgwMsg::~MgwMsg() {
  // @@protoc_insertion_point(destructor:mgw.MgwMsg)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MgwMsg::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (has_message()) {
    clear_message();
  }
}

void MgwMsg::ArenaDtor(void* object) {
  MgwMsg* _this = reinterpret_cast< MgwMsg* >(object);
  (void)_this;
}
void MgwMsg::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MgwMsg::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MgwMsg& MgwMsg::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MgwMsg_mgw_2eproto.base);
  return *internal_default_instance();
}


void MgwMsg::clear_message() {
// @@protoc_insertion_point(one_of_clear_start:mgw.MgwMsg)
  switch (message_case()) {
    case kStartStream: {
      if (GetArena() == nullptr) {
        delete message_.start_stream_;
      }
      break;
    }
    case kResult: {
      if (GetArena() == nullptr) {
        delete message_.result_;
      }
      break;
    }
    case kStreamInfo: {
      if (GetArena() == nullptr) {
        delete message_.stream_info_;
      }
      break;
    }
    case MESSAGE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = MESSAGE_NOT_SET;
}


void MgwMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:mgw.MgwMsg)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_message();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MgwMsg::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .mgw.StartStream start_stream = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162)) {
          ptr = ctx->ParseMessage(_internal_mutable_start_stream(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .mgw.ReqResult result = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 170)) {
          ptr = ctx->ParseMessage(_internal_mutable_result(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .mgw.StreamInfo stream_info = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 178)) {
          ptr = ctx->ParseMessage(_internal_mutable_stream_info(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MgwMsg::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mgw.MgwMsg)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .mgw.StartStream start_stream = 20;
  if (_internal_has_start_stream()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        20, _Internal::start_stream(this), target, stream);
  }

  // .mgw.ReqResult result = 21;
  if (_internal_has_result()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        21, _Internal::result(this), target, stream);
  }

  // .mgw.StreamInfo stream_info = 22;
  if (_internal_has_stream_info()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        22, _Internal::stream_info(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mgw.MgwMsg)
  return target;
}

size_t MgwMsg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mgw.MgwMsg)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (message_case()) {
    // .mgw.StartStream start_stream = 20;
    case kStartStream: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *message_.start_stream_);
      break;
    }
    // .mgw.ReqResult result = 21;
    case kResult: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *message_.result_);
      break;
    }
    // .mgw.StreamInfo stream_info = 22;
    case kStreamInfo: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *message_.stream_info_);
      break;
    }
    case MESSAGE_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MgwMsg::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mgw.MgwMsg)
  GOOGLE_DCHECK_NE(&from, this);
  const MgwMsg* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MgwMsg>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mgw.MgwMsg)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mgw.MgwMsg)
    MergeFrom(*source);
  }
}

void MgwMsg::MergeFrom(const MgwMsg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mgw.MgwMsg)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.message_case()) {
    case kStartStream: {
      _internal_mutable_start_stream()->::mgw::StartStream::MergeFrom(from._internal_start_stream());
      break;
    }
    case kResult: {
      _internal_mutable_result()->::mgw::ReqResult::MergeFrom(from._internal_result());
      break;
    }
    case kStreamInfo: {
      _internal_mutable_stream_info()->::mgw::StreamInfo::MergeFrom(from._internal_stream_info());
      break;
    }
    case MESSAGE_NOT_SET: {
      break;
    }
  }
}

void MgwMsg::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mgw.MgwMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MgwMsg::CopyFrom(const MgwMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mgw.MgwMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MgwMsg::IsInitialized() const {
  return true;
}

void MgwMsg::InternalSwap(MgwMsg* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(message_, other->message_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata MgwMsg::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace mgw
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::mgw::Device* Arena::CreateMaybeMessage< ::mgw::Device >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mgw::Device >(arena);
}
template<> PROTOBUF_NOINLINE ::mgw::Stream* Arena::CreateMaybeMessage< ::mgw::Stream >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mgw::Stream >(arena);
}
template<> PROTOBUF_NOINLINE ::mgw::StartStream* Arena::CreateMaybeMessage< ::mgw::StartStream >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mgw::StartStream >(arena);
}
template<> PROTOBUF_NOINLINE ::mgw::ReqResult* Arena::CreateMaybeMessage< ::mgw::ReqResult >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mgw::ReqResult >(arena);
}
template<> PROTOBUF_NOINLINE ::mgw::StreamInfo* Arena::CreateMaybeMessage< ::mgw::StreamInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mgw::StreamInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::mgw::MgwMsg* Arena::CreateMaybeMessage< ::mgw::MgwMsg >(Arena* arena) {
  return Arena::CreateMessageInternal< ::mgw::MgwMsg >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
