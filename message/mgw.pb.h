// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: mgw.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_mgw_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_mgw_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3014000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3014000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_mgw_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_mgw_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[6]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_mgw_2eproto;
namespace mgw {
class Device;
class DeviceDefaultTypeInternal;
extern DeviceDefaultTypeInternal _Device_default_instance_;
class MgwMsg;
class MgwMsgDefaultTypeInternal;
extern MgwMsgDefaultTypeInternal _MgwMsg_default_instance_;
class ReqResult;
class ReqResultDefaultTypeInternal;
extern ReqResultDefaultTypeInternal _ReqResult_default_instance_;
class StartStream;
class StartStreamDefaultTypeInternal;
extern StartStreamDefaultTypeInternal _StartStream_default_instance_;
class Stream;
class StreamDefaultTypeInternal;
extern StreamDefaultTypeInternal _Stream_default_instance_;
class StreamInfo;
class StreamInfoDefaultTypeInternal;
extern StreamInfoDefaultTypeInternal _StreamInfo_default_instance_;
}  // namespace mgw
PROTOBUF_NAMESPACE_OPEN
template<> ::mgw::Device* Arena::CreateMaybeMessage<::mgw::Device>(Arena*);
template<> ::mgw::MgwMsg* Arena::CreateMaybeMessage<::mgw::MgwMsg>(Arena*);
template<> ::mgw::ReqResult* Arena::CreateMaybeMessage<::mgw::ReqResult>(Arena*);
template<> ::mgw::StartStream* Arena::CreateMaybeMessage<::mgw::StartStream>(Arena*);
template<> ::mgw::Stream* Arena::CreateMaybeMessage<::mgw::Stream>(Arena*);
template<> ::mgw::StreamInfo* Arena::CreateMaybeMessage<::mgw::StreamInfo>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace mgw {

// ===================================================================

class Device PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mgw.Device) */ {
 public:
  inline Device() : Device(nullptr) {}
  virtual ~Device();

  Device(const Device& from);
  Device(Device&& from) noexcept
    : Device() {
    *this = ::std::move(from);
  }

  inline Device& operator=(const Device& from) {
    CopyFrom(from);
    return *this;
  }
  inline Device& operator=(Device&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Device& default_instance();

  static inline const Device* internal_default_instance() {
    return reinterpret_cast<const Device*>(
               &_Device_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Device& a, Device& b) {
    a.Swap(&b);
  }
  inline void Swap(Device* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Device* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Device* New() const final {
    return CreateMaybeMessage<Device>(nullptr);
  }

  Device* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Device>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Device& from);
  void MergeFrom(const Device& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Device* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mgw.Device";
  }
  protected:
  explicit Device(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_mgw_2eproto);
    return ::descriptor_table_mgw_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTypeFieldNumber = 1,
    kSnFieldNumber = 2,
    kTokenFieldNumber = 3,
  };
  // string type = 1;
  void clear_type();
  const std::string& type() const;
  void set_type(const std::string& value);
  void set_type(std::string&& value);
  void set_type(const char* value);
  void set_type(const char* value, size_t size);
  std::string* mutable_type();
  std::string* release_type();
  void set_allocated_type(std::string* type);
  private:
  const std::string& _internal_type() const;
  void _internal_set_type(const std::string& value);
  std::string* _internal_mutable_type();
  public:

  // string sn = 2;
  void clear_sn();
  const std::string& sn() const;
  void set_sn(const std::string& value);
  void set_sn(std::string&& value);
  void set_sn(const char* value);
  void set_sn(const char* value, size_t size);
  std::string* mutable_sn();
  std::string* release_sn();
  void set_allocated_sn(std::string* sn);
  private:
  const std::string& _internal_sn() const;
  void _internal_set_sn(const std::string& value);
  std::string* _internal_mutable_sn();
  public:

  // string token = 3;
  void clear_token();
  const std::string& token() const;
  void set_token(const std::string& value);
  void set_token(std::string&& value);
  void set_token(const char* value);
  void set_token(const char* value, size_t size);
  std::string* mutable_token();
  std::string* release_token();
  void set_allocated_token(std::string* token);
  private:
  const std::string& _internal_token() const;
  void _internal_set_token(const std::string& value);
  std::string* _internal_mutable_token();
  public:

  // @@protoc_insertion_point(class_scope:mgw.Device)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr type_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sn_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr token_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_mgw_2eproto;
};
// -------------------------------------------------------------------

class Stream PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mgw.Stream) */ {
 public:
  inline Stream() : Stream(nullptr) {}
  virtual ~Stream();

  Stream(const Stream& from);
  Stream(Stream&& from) noexcept
    : Stream() {
    *this = ::std::move(from);
  }

  inline Stream& operator=(const Stream& from) {
    CopyFrom(from);
    return *this;
  }
  inline Stream& operator=(Stream&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Stream& default_instance();

  static inline const Stream* internal_default_instance() {
    return reinterpret_cast<const Stream*>(
               &_Stream_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Stream& a, Stream& b) {
    a.Swap(&b);
  }
  inline void Swap(Stream* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Stream* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Stream* New() const final {
    return CreateMaybeMessage<Stream>(nullptr);
  }

  Stream* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Stream>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Stream& from);
  void MergeFrom(const Stream& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Stream* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mgw.Stream";
  }
  protected:
  explicit Stream(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_mgw_2eproto);
    return ::descriptor_table_mgw_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUriFieldNumber = 4,
    kCodeFieldNumber = 5,
    kUsernameFieldNumber = 6,
    kPasswordFieldNumber = 7,
    kEnableFieldNumber = 1,
    kSrcChannelFieldNumber = 2,
    kOutChannelFieldNumber = 3,
  };
  // string uri = 4;
  void clear_uri();
  const std::string& uri() const;
  void set_uri(const std::string& value);
  void set_uri(std::string&& value);
  void set_uri(const char* value);
  void set_uri(const char* value, size_t size);
  std::string* mutable_uri();
  std::string* release_uri();
  void set_allocated_uri(std::string* uri);
  private:
  const std::string& _internal_uri() const;
  void _internal_set_uri(const std::string& value);
  std::string* _internal_mutable_uri();
  public:

  // string code = 5;
  void clear_code();
  const std::string& code() const;
  void set_code(const std::string& value);
  void set_code(std::string&& value);
  void set_code(const char* value);
  void set_code(const char* value, size_t size);
  std::string* mutable_code();
  std::string* release_code();
  void set_allocated_code(std::string* code);
  private:
  const std::string& _internal_code() const;
  void _internal_set_code(const std::string& value);
  std::string* _internal_mutable_code();
  public:

  // string username = 6;
  void clear_username();
  const std::string& username() const;
  void set_username(const std::string& value);
  void set_username(std::string&& value);
  void set_username(const char* value);
  void set_username(const char* value, size_t size);
  std::string* mutable_username();
  std::string* release_username();
  void set_allocated_username(std::string* username);
  private:
  const std::string& _internal_username() const;
  void _internal_set_username(const std::string& value);
  std::string* _internal_mutable_username();
  public:

  // string password = 7;
  void clear_password();
  const std::string& password() const;
  void set_password(const std::string& value);
  void set_password(std::string&& value);
  void set_password(const char* value);
  void set_password(const char* value, size_t size);
  std::string* mutable_password();
  std::string* release_password();
  void set_allocated_password(std::string* password);
  private:
  const std::string& _internal_password() const;
  void _internal_set_password(const std::string& value);
  std::string* _internal_mutable_password();
  public:

  // bool enable = 1;
  void clear_enable();
  bool enable() const;
  void set_enable(bool value);
  private:
  bool _internal_enable() const;
  void _internal_set_enable(bool value);
  public:

  // int32 src_channel = 2;
  void clear_src_channel();
  ::PROTOBUF_NAMESPACE_ID::int32 src_channel() const;
  void set_src_channel(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_src_channel() const;
  void _internal_set_src_channel(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 out_channel = 3;
  void clear_out_channel();
  ::PROTOBUF_NAMESPACE_ID::int32 out_channel() const;
  void set_out_channel(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_out_channel() const;
  void _internal_set_out_channel(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:mgw.Stream)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr uri_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr code_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr username_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr password_;
  bool enable_;
  ::PROTOBUF_NAMESPACE_ID::int32 src_channel_;
  ::PROTOBUF_NAMESPACE_ID::int32 out_channel_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_mgw_2eproto;
};
// -------------------------------------------------------------------

class StartStream PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mgw.StartStream) */ {
 public:
  inline StartStream() : StartStream(nullptr) {}
  virtual ~StartStream();

  StartStream(const StartStream& from);
  StartStream(StartStream&& from) noexcept
    : StartStream() {
    *this = ::std::move(from);
  }

  inline StartStream& operator=(const StartStream& from) {
    CopyFrom(from);
    return *this;
  }
  inline StartStream& operator=(StartStream&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const StartStream& default_instance();

  static inline const StartStream* internal_default_instance() {
    return reinterpret_cast<const StartStream*>(
               &_StartStream_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(StartStream& a, StartStream& b) {
    a.Swap(&b);
  }
  inline void Swap(StartStream* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StartStream* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StartStream* New() const final {
    return CreateMaybeMessage<StartStream>(nullptr);
  }

  StartStream* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StartStream>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const StartStream& from);
  void MergeFrom(const StartStream& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StartStream* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mgw.StartStream";
  }
  protected:
  explicit StartStream(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_mgw_2eproto);
    return ::descriptor_table_mgw_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDeviceFieldNumber = 1,
    kStreamFieldNumber = 2,
  };
  // .mgw.Device device = 1;
  bool has_device() const;
  private:
  bool _internal_has_device() const;
  public:
  void clear_device();
  const ::mgw::Device& device() const;
  ::mgw::Device* release_device();
  ::mgw::Device* mutable_device();
  void set_allocated_device(::mgw::Device* device);
  private:
  const ::mgw::Device& _internal_device() const;
  ::mgw::Device* _internal_mutable_device();
  public:
  void unsafe_arena_set_allocated_device(
      ::mgw::Device* device);
  ::mgw::Device* unsafe_arena_release_device();

  // .mgw.Stream stream = 2;
  bool has_stream() const;
  private:
  bool _internal_has_stream() const;
  public:
  void clear_stream();
  const ::mgw::Stream& stream() const;
  ::mgw::Stream* release_stream();
  ::mgw::Stream* mutable_stream();
  void set_allocated_stream(::mgw::Stream* stream);
  private:
  const ::mgw::Stream& _internal_stream() const;
  ::mgw::Stream* _internal_mutable_stream();
  public:
  void unsafe_arena_set_allocated_stream(
      ::mgw::Stream* stream);
  ::mgw::Stream* unsafe_arena_release_stream();

  // @@protoc_insertion_point(class_scope:mgw.StartStream)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::mgw::Device* device_;
  ::mgw::Stream* stream_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_mgw_2eproto;
};
// -------------------------------------------------------------------

class ReqResult PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mgw.ReqResult) */ {
 public:
  inline ReqResult() : ReqResult(nullptr) {}
  virtual ~ReqResult();

  ReqResult(const ReqResult& from);
  ReqResult(ReqResult&& from) noexcept
    : ReqResult() {
    *this = ::std::move(from);
  }

  inline ReqResult& operator=(const ReqResult& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReqResult& operator=(ReqResult&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ReqResult& default_instance();

  static inline const ReqResult* internal_default_instance() {
    return reinterpret_cast<const ReqResult*>(
               &_ReqResult_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(ReqResult& a, ReqResult& b) {
    a.Swap(&b);
  }
  inline void Swap(ReqResult* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReqResult* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ReqResult* New() const final {
    return CreateMaybeMessage<ReqResult>(nullptr);
  }

  ReqResult* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ReqResult>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ReqResult& from);
  void MergeFrom(const ReqResult& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReqResult* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mgw.ReqResult";
  }
  protected:
  explicit ReqResult(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_mgw_2eproto);
    return ::descriptor_table_mgw_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:mgw.ReqResult)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_mgw_2eproto;
};
// -------------------------------------------------------------------

class StreamInfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mgw.StreamInfo) */ {
 public:
  inline StreamInfo() : StreamInfo(nullptr) {}
  virtual ~StreamInfo();

  StreamInfo(const StreamInfo& from);
  StreamInfo(StreamInfo&& from) noexcept
    : StreamInfo() {
    *this = ::std::move(from);
  }

  inline StreamInfo& operator=(const StreamInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline StreamInfo& operator=(StreamInfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const StreamInfo& default_instance();

  static inline const StreamInfo* internal_default_instance() {
    return reinterpret_cast<const StreamInfo*>(
               &_StreamInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(StreamInfo& a, StreamInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(StreamInfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StreamInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StreamInfo* New() const final {
    return CreateMaybeMessage<StreamInfo>(nullptr);
  }

  StreamInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StreamInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const StreamInfo& from);
  void MergeFrom(const StreamInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StreamInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mgw.StreamInfo";
  }
  protected:
  explicit StreamInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_mgw_2eproto);
    return ::descriptor_table_mgw_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:mgw.StreamInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_mgw_2eproto;
};
// -------------------------------------------------------------------

class MgwMsg PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mgw.MgwMsg) */ {
 public:
  inline MgwMsg() : MgwMsg(nullptr) {}
  virtual ~MgwMsg();

  MgwMsg(const MgwMsg& from);
  MgwMsg(MgwMsg&& from) noexcept
    : MgwMsg() {
    *this = ::std::move(from);
  }

  inline MgwMsg& operator=(const MgwMsg& from) {
    CopyFrom(from);
    return *this;
  }
  inline MgwMsg& operator=(MgwMsg&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MgwMsg& default_instance();

  enum MessageCase {
    kStartStream = 20,
    kResult = 21,
    kStreamInfo = 22,
    MESSAGE_NOT_SET = 0,
  };

  static inline const MgwMsg* internal_default_instance() {
    return reinterpret_cast<const MgwMsg*>(
               &_MgwMsg_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(MgwMsg& a, MgwMsg& b) {
    a.Swap(&b);
  }
  inline void Swap(MgwMsg* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MgwMsg* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MgwMsg* New() const final {
    return CreateMaybeMessage<MgwMsg>(nullptr);
  }

  MgwMsg* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MgwMsg>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MgwMsg& from);
  void MergeFrom(const MgwMsg& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MgwMsg* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mgw.MgwMsg";
  }
  protected:
  explicit MgwMsg(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_mgw_2eproto);
    return ::descriptor_table_mgw_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStartStreamFieldNumber = 20,
    kResultFieldNumber = 21,
    kStreamInfoFieldNumber = 22,
  };
  // .mgw.StartStream start_stream = 20;
  bool has_start_stream() const;
  private:
  bool _internal_has_start_stream() const;
  public:
  void clear_start_stream();
  const ::mgw::StartStream& start_stream() const;
  ::mgw::StartStream* release_start_stream();
  ::mgw::StartStream* mutable_start_stream();
  void set_allocated_start_stream(::mgw::StartStream* start_stream);
  private:
  const ::mgw::StartStream& _internal_start_stream() const;
  ::mgw::StartStream* _internal_mutable_start_stream();
  public:
  void unsafe_arena_set_allocated_start_stream(
      ::mgw::StartStream* start_stream);
  ::mgw::StartStream* unsafe_arena_release_start_stream();

  // .mgw.ReqResult result = 21;
  bool has_result() const;
  private:
  bool _internal_has_result() const;
  public:
  void clear_result();
  const ::mgw::ReqResult& result() const;
  ::mgw::ReqResult* release_result();
  ::mgw::ReqResult* mutable_result();
  void set_allocated_result(::mgw::ReqResult* result);
  private:
  const ::mgw::ReqResult& _internal_result() const;
  ::mgw::ReqResult* _internal_mutable_result();
  public:
  void unsafe_arena_set_allocated_result(
      ::mgw::ReqResult* result);
  ::mgw::ReqResult* unsafe_arena_release_result();

  // .mgw.StreamInfo stream_info = 22;
  bool has_stream_info() const;
  private:
  bool _internal_has_stream_info() const;
  public:
  void clear_stream_info();
  const ::mgw::StreamInfo& stream_info() const;
  ::mgw::StreamInfo* release_stream_info();
  ::mgw::StreamInfo* mutable_stream_info();
  void set_allocated_stream_info(::mgw::StreamInfo* stream_info);
  private:
  const ::mgw::StreamInfo& _internal_stream_info() const;
  ::mgw::StreamInfo* _internal_mutable_stream_info();
  public:
  void unsafe_arena_set_allocated_stream_info(
      ::mgw::StreamInfo* stream_info);
  ::mgw::StreamInfo* unsafe_arena_release_stream_info();

  void clear_message();
  MessageCase message_case() const;
  // @@protoc_insertion_point(class_scope:mgw.MgwMsg)
 private:
  class _Internal;
  void set_has_start_stream();
  void set_has_result();
  void set_has_stream_info();

  inline bool has_message() const;
  inline void clear_has_message();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  union MessageUnion {
    MessageUnion() {}
    ::mgw::StartStream* start_stream_;
    ::mgw::ReqResult* result_;
    ::mgw::StreamInfo* stream_info_;
  } message_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_mgw_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Device

// string type = 1;
inline void Device::clear_type() {
  type_.ClearToEmpty();
}
inline const std::string& Device::type() const {
  // @@protoc_insertion_point(field_get:mgw.Device.type)
  return _internal_type();
}
inline void Device::set_type(const std::string& value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:mgw.Device.type)
}
inline std::string* Device::mutable_type() {
  // @@protoc_insertion_point(field_mutable:mgw.Device.type)
  return _internal_mutable_type();
}
inline const std::string& Device::_internal_type() const {
  return type_.Get();
}
inline void Device::_internal_set_type(const std::string& value) {
  
  type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Device::set_type(std::string&& value) {
  
  type_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:mgw.Device.type)
}
inline void Device::set_type(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:mgw.Device.type)
}
inline void Device::set_type(const char* value,
    size_t size) {
  
  type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:mgw.Device.type)
}
inline std::string* Device::_internal_mutable_type() {
  
  return type_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Device::release_type() {
  // @@protoc_insertion_point(field_release:mgw.Device.type)
  return type_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Device::set_allocated_type(std::string* type) {
  if (type != nullptr) {
    
  } else {
    
  }
  type_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), type,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:mgw.Device.type)
}

// string sn = 2;
inline void Device::clear_sn() {
  sn_.ClearToEmpty();
}
inline const std::string& Device::sn() const {
  // @@protoc_insertion_point(field_get:mgw.Device.sn)
  return _internal_sn();
}
inline void Device::set_sn(const std::string& value) {
  _internal_set_sn(value);
  // @@protoc_insertion_point(field_set:mgw.Device.sn)
}
inline std::string* Device::mutable_sn() {
  // @@protoc_insertion_point(field_mutable:mgw.Device.sn)
  return _internal_mutable_sn();
}
inline const std::string& Device::_internal_sn() const {
  return sn_.Get();
}
inline void Device::_internal_set_sn(const std::string& value) {
  
  sn_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Device::set_sn(std::string&& value) {
  
  sn_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:mgw.Device.sn)
}
inline void Device::set_sn(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  sn_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:mgw.Device.sn)
}
inline void Device::set_sn(const char* value,
    size_t size) {
  
  sn_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:mgw.Device.sn)
}
inline std::string* Device::_internal_mutable_sn() {
  
  return sn_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Device::release_sn() {
  // @@protoc_insertion_point(field_release:mgw.Device.sn)
  return sn_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Device::set_allocated_sn(std::string* sn) {
  if (sn != nullptr) {
    
  } else {
    
  }
  sn_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), sn,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:mgw.Device.sn)
}

// string token = 3;
inline void Device::clear_token() {
  token_.ClearToEmpty();
}
inline const std::string& Device::token() const {
  // @@protoc_insertion_point(field_get:mgw.Device.token)
  return _internal_token();
}
inline void Device::set_token(const std::string& value) {
  _internal_set_token(value);
  // @@protoc_insertion_point(field_set:mgw.Device.token)
}
inline std::string* Device::mutable_token() {
  // @@protoc_insertion_point(field_mutable:mgw.Device.token)
  return _internal_mutable_token();
}
inline const std::string& Device::_internal_token() const {
  return token_.Get();
}
inline void Device::_internal_set_token(const std::string& value) {
  
  token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Device::set_token(std::string&& value) {
  
  token_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:mgw.Device.token)
}
inline void Device::set_token(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:mgw.Device.token)
}
inline void Device::set_token(const char* value,
    size_t size) {
  
  token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:mgw.Device.token)
}
inline std::string* Device::_internal_mutable_token() {
  
  return token_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Device::release_token() {
  // @@protoc_insertion_point(field_release:mgw.Device.token)
  return token_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Device::set_allocated_token(std::string* token) {
  if (token != nullptr) {
    
  } else {
    
  }
  token_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), token,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:mgw.Device.token)
}

// -------------------------------------------------------------------

// Stream

// bool enable = 1;
inline void Stream::clear_enable() {
  enable_ = false;
}
inline bool Stream::_internal_enable() const {
  return enable_;
}
inline bool Stream::enable() const {
  // @@protoc_insertion_point(field_get:mgw.Stream.enable)
  return _internal_enable();
}
inline void Stream::_internal_set_enable(bool value) {
  
  enable_ = value;
}
inline void Stream::set_enable(bool value) {
  _internal_set_enable(value);
  // @@protoc_insertion_point(field_set:mgw.Stream.enable)
}

// int32 src_channel = 2;
inline void Stream::clear_src_channel() {
  src_channel_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Stream::_internal_src_channel() const {
  return src_channel_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Stream::src_channel() const {
  // @@protoc_insertion_point(field_get:mgw.Stream.src_channel)
  return _internal_src_channel();
}
inline void Stream::_internal_set_src_channel(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  src_channel_ = value;
}
inline void Stream::set_src_channel(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_src_channel(value);
  // @@protoc_insertion_point(field_set:mgw.Stream.src_channel)
}

// int32 out_channel = 3;
inline void Stream::clear_out_channel() {
  out_channel_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Stream::_internal_out_channel() const {
  return out_channel_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Stream::out_channel() const {
  // @@protoc_insertion_point(field_get:mgw.Stream.out_channel)
  return _internal_out_channel();
}
inline void Stream::_internal_set_out_channel(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  out_channel_ = value;
}
inline void Stream::set_out_channel(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_out_channel(value);
  // @@protoc_insertion_point(field_set:mgw.Stream.out_channel)
}

// string uri = 4;
inline void Stream::clear_uri() {
  uri_.ClearToEmpty();
}
inline const std::string& Stream::uri() const {
  // @@protoc_insertion_point(field_get:mgw.Stream.uri)
  return _internal_uri();
}
inline void Stream::set_uri(const std::string& value) {
  _internal_set_uri(value);
  // @@protoc_insertion_point(field_set:mgw.Stream.uri)
}
inline std::string* Stream::mutable_uri() {
  // @@protoc_insertion_point(field_mutable:mgw.Stream.uri)
  return _internal_mutable_uri();
}
inline const std::string& Stream::_internal_uri() const {
  return uri_.Get();
}
inline void Stream::_internal_set_uri(const std::string& value) {
  
  uri_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Stream::set_uri(std::string&& value) {
  
  uri_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:mgw.Stream.uri)
}
inline void Stream::set_uri(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  uri_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:mgw.Stream.uri)
}
inline void Stream::set_uri(const char* value,
    size_t size) {
  
  uri_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:mgw.Stream.uri)
}
inline std::string* Stream::_internal_mutable_uri() {
  
  return uri_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Stream::release_uri() {
  // @@protoc_insertion_point(field_release:mgw.Stream.uri)
  return uri_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Stream::set_allocated_uri(std::string* uri) {
  if (uri != nullptr) {
    
  } else {
    
  }
  uri_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), uri,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:mgw.Stream.uri)
}

// string code = 5;
inline void Stream::clear_code() {
  code_.ClearToEmpty();
}
inline const std::string& Stream::code() const {
  // @@protoc_insertion_point(field_get:mgw.Stream.code)
  return _internal_code();
}
inline void Stream::set_code(const std::string& value) {
  _internal_set_code(value);
  // @@protoc_insertion_point(field_set:mgw.Stream.code)
}
inline std::string* Stream::mutable_code() {
  // @@protoc_insertion_point(field_mutable:mgw.Stream.code)
  return _internal_mutable_code();
}
inline const std::string& Stream::_internal_code() const {
  return code_.Get();
}
inline void Stream::_internal_set_code(const std::string& value) {
  
  code_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Stream::set_code(std::string&& value) {
  
  code_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:mgw.Stream.code)
}
inline void Stream::set_code(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  code_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:mgw.Stream.code)
}
inline void Stream::set_code(const char* value,
    size_t size) {
  
  code_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:mgw.Stream.code)
}
inline std::string* Stream::_internal_mutable_code() {
  
  return code_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Stream::release_code() {
  // @@protoc_insertion_point(field_release:mgw.Stream.code)
  return code_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Stream::set_allocated_code(std::string* code) {
  if (code != nullptr) {
    
  } else {
    
  }
  code_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), code,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:mgw.Stream.code)
}

// string username = 6;
inline void Stream::clear_username() {
  username_.ClearToEmpty();
}
inline const std::string& Stream::username() const {
  // @@protoc_insertion_point(field_get:mgw.Stream.username)
  return _internal_username();
}
inline void Stream::set_username(const std::string& value) {
  _internal_set_username(value);
  // @@protoc_insertion_point(field_set:mgw.Stream.username)
}
inline std::string* Stream::mutable_username() {
  // @@protoc_insertion_point(field_mutable:mgw.Stream.username)
  return _internal_mutable_username();
}
inline const std::string& Stream::_internal_username() const {
  return username_.Get();
}
inline void Stream::_internal_set_username(const std::string& value) {
  
  username_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Stream::set_username(std::string&& value) {
  
  username_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:mgw.Stream.username)
}
inline void Stream::set_username(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  username_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:mgw.Stream.username)
}
inline void Stream::set_username(const char* value,
    size_t size) {
  
  username_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:mgw.Stream.username)
}
inline std::string* Stream::_internal_mutable_username() {
  
  return username_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Stream::release_username() {
  // @@protoc_insertion_point(field_release:mgw.Stream.username)
  return username_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Stream::set_allocated_username(std::string* username) {
  if (username != nullptr) {
    
  } else {
    
  }
  username_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), username,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:mgw.Stream.username)
}

// string password = 7;
inline void Stream::clear_password() {
  password_.ClearToEmpty();
}
inline const std::string& Stream::password() const {
  // @@protoc_insertion_point(field_get:mgw.Stream.password)
  return _internal_password();
}
inline void Stream::set_password(const std::string& value) {
  _internal_set_password(value);
  // @@protoc_insertion_point(field_set:mgw.Stream.password)
}
inline std::string* Stream::mutable_password() {
  // @@protoc_insertion_point(field_mutable:mgw.Stream.password)
  return _internal_mutable_password();
}
inline const std::string& Stream::_internal_password() const {
  return password_.Get();
}
inline void Stream::_internal_set_password(const std::string& value) {
  
  password_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Stream::set_password(std::string&& value) {
  
  password_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:mgw.Stream.password)
}
inline void Stream::set_password(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  password_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:mgw.Stream.password)
}
inline void Stream::set_password(const char* value,
    size_t size) {
  
  password_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:mgw.Stream.password)
}
inline std::string* Stream::_internal_mutable_password() {
  
  return password_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Stream::release_password() {
  // @@protoc_insertion_point(field_release:mgw.Stream.password)
  return password_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Stream::set_allocated_password(std::string* password) {
  if (password != nullptr) {
    
  } else {
    
  }
  password_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), password,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:mgw.Stream.password)
}

// -------------------------------------------------------------------

// StartStream

// .mgw.Device device = 1;
inline bool StartStream::_internal_has_device() const {
  return this != internal_default_instance() && device_ != nullptr;
}
inline bool StartStream::has_device() const {
  return _internal_has_device();
}
inline void StartStream::clear_device() {
  if (GetArena() == nullptr && device_ != nullptr) {
    delete device_;
  }
  device_ = nullptr;
}
inline const ::mgw::Device& StartStream::_internal_device() const {
  const ::mgw::Device* p = device_;
  return p != nullptr ? *p : reinterpret_cast<const ::mgw::Device&>(
      ::mgw::_Device_default_instance_);
}
inline const ::mgw::Device& StartStream::device() const {
  // @@protoc_insertion_point(field_get:mgw.StartStream.device)
  return _internal_device();
}
inline void StartStream::unsafe_arena_set_allocated_device(
    ::mgw::Device* device) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(device_);
  }
  device_ = device;
  if (device) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mgw.StartStream.device)
}
inline ::mgw::Device* StartStream::release_device() {
  
  ::mgw::Device* temp = device_;
  device_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::mgw::Device* StartStream::unsafe_arena_release_device() {
  // @@protoc_insertion_point(field_release:mgw.StartStream.device)
  
  ::mgw::Device* temp = device_;
  device_ = nullptr;
  return temp;
}
inline ::mgw::Device* StartStream::_internal_mutable_device() {
  
  if (device_ == nullptr) {
    auto* p = CreateMaybeMessage<::mgw::Device>(GetArena());
    device_ = p;
  }
  return device_;
}
inline ::mgw::Device* StartStream::mutable_device() {
  // @@protoc_insertion_point(field_mutable:mgw.StartStream.device)
  return _internal_mutable_device();
}
inline void StartStream::set_allocated_device(::mgw::Device* device) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete device_;
  }
  if (device) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(device);
    if (message_arena != submessage_arena) {
      device = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, device, submessage_arena);
    }
    
  } else {
    
  }
  device_ = device;
  // @@protoc_insertion_point(field_set_allocated:mgw.StartStream.device)
}

// .mgw.Stream stream = 2;
inline bool StartStream::_internal_has_stream() const {
  return this != internal_default_instance() && stream_ != nullptr;
}
inline bool StartStream::has_stream() const {
  return _internal_has_stream();
}
inline void StartStream::clear_stream() {
  if (GetArena() == nullptr && stream_ != nullptr) {
    delete stream_;
  }
  stream_ = nullptr;
}
inline const ::mgw::Stream& StartStream::_internal_stream() const {
  const ::mgw::Stream* p = stream_;
  return p != nullptr ? *p : reinterpret_cast<const ::mgw::Stream&>(
      ::mgw::_Stream_default_instance_);
}
inline const ::mgw::Stream& StartStream::stream() const {
  // @@protoc_insertion_point(field_get:mgw.StartStream.stream)
  return _internal_stream();
}
inline void StartStream::unsafe_arena_set_allocated_stream(
    ::mgw::Stream* stream) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(stream_);
  }
  stream_ = stream;
  if (stream) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mgw.StartStream.stream)
}
inline ::mgw::Stream* StartStream::release_stream() {
  
  ::mgw::Stream* temp = stream_;
  stream_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::mgw::Stream* StartStream::unsafe_arena_release_stream() {
  // @@protoc_insertion_point(field_release:mgw.StartStream.stream)
  
  ::mgw::Stream* temp = stream_;
  stream_ = nullptr;
  return temp;
}
inline ::mgw::Stream* StartStream::_internal_mutable_stream() {
  
  if (stream_ == nullptr) {
    auto* p = CreateMaybeMessage<::mgw::Stream>(GetArena());
    stream_ = p;
  }
  return stream_;
}
inline ::mgw::Stream* StartStream::mutable_stream() {
  // @@protoc_insertion_point(field_mutable:mgw.StartStream.stream)
  return _internal_mutable_stream();
}
inline void StartStream::set_allocated_stream(::mgw::Stream* stream) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete stream_;
  }
  if (stream) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(stream);
    if (message_arena != submessage_arena) {
      stream = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, stream, submessage_arena);
    }
    
  } else {
    
  }
  stream_ = stream;
  // @@protoc_insertion_point(field_set_allocated:mgw.StartStream.stream)
}

// -------------------------------------------------------------------

// ReqResult

// -------------------------------------------------------------------

// StreamInfo

// -------------------------------------------------------------------

// MgwMsg

// .mgw.StartStream start_stream = 20;
inline bool MgwMsg::_internal_has_start_stream() const {
  return message_case() == kStartStream;
}
inline bool MgwMsg::has_start_stream() const {
  return _internal_has_start_stream();
}
inline void MgwMsg::set_has_start_stream() {
  _oneof_case_[0] = kStartStream;
}
inline void MgwMsg::clear_start_stream() {
  if (_internal_has_start_stream()) {
    if (GetArena() == nullptr) {
      delete message_.start_stream_;
    }
    clear_has_message();
  }
}
inline ::mgw::StartStream* MgwMsg::release_start_stream() {
  // @@protoc_insertion_point(field_release:mgw.MgwMsg.start_stream)
  if (_internal_has_start_stream()) {
    clear_has_message();
      ::mgw::StartStream* temp = message_.start_stream_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    message_.start_stream_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::mgw::StartStream& MgwMsg::_internal_start_stream() const {
  return _internal_has_start_stream()
      ? *message_.start_stream_
      : reinterpret_cast< ::mgw::StartStream&>(::mgw::_StartStream_default_instance_);
}
inline const ::mgw::StartStream& MgwMsg::start_stream() const {
  // @@protoc_insertion_point(field_get:mgw.MgwMsg.start_stream)
  return _internal_start_stream();
}
inline ::mgw::StartStream* MgwMsg::unsafe_arena_release_start_stream() {
  // @@protoc_insertion_point(field_unsafe_arena_release:mgw.MgwMsg.start_stream)
  if (_internal_has_start_stream()) {
    clear_has_message();
    ::mgw::StartStream* temp = message_.start_stream_;
    message_.start_stream_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void MgwMsg::unsafe_arena_set_allocated_start_stream(::mgw::StartStream* start_stream) {
  clear_message();
  if (start_stream) {
    set_has_start_stream();
    message_.start_stream_ = start_stream;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mgw.MgwMsg.start_stream)
}
inline ::mgw::StartStream* MgwMsg::_internal_mutable_start_stream() {
  if (!_internal_has_start_stream()) {
    clear_message();
    set_has_start_stream();
    message_.start_stream_ = CreateMaybeMessage< ::mgw::StartStream >(GetArena());
  }
  return message_.start_stream_;
}
inline ::mgw::StartStream* MgwMsg::mutable_start_stream() {
  // @@protoc_insertion_point(field_mutable:mgw.MgwMsg.start_stream)
  return _internal_mutable_start_stream();
}

// .mgw.ReqResult result = 21;
inline bool MgwMsg::_internal_has_result() const {
  return message_case() == kResult;
}
inline bool MgwMsg::has_result() const {
  return _internal_has_result();
}
inline void MgwMsg::set_has_result() {
  _oneof_case_[0] = kResult;
}
inline void MgwMsg::clear_result() {
  if (_internal_has_result()) {
    if (GetArena() == nullptr) {
      delete message_.result_;
    }
    clear_has_message();
  }
}
inline ::mgw::ReqResult* MgwMsg::release_result() {
  // @@protoc_insertion_point(field_release:mgw.MgwMsg.result)
  if (_internal_has_result()) {
    clear_has_message();
      ::mgw::ReqResult* temp = message_.result_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    message_.result_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::mgw::ReqResult& MgwMsg::_internal_result() const {
  return _internal_has_result()
      ? *message_.result_
      : reinterpret_cast< ::mgw::ReqResult&>(::mgw::_ReqResult_default_instance_);
}
inline const ::mgw::ReqResult& MgwMsg::result() const {
  // @@protoc_insertion_point(field_get:mgw.MgwMsg.result)
  return _internal_result();
}
inline ::mgw::ReqResult* MgwMsg::unsafe_arena_release_result() {
  // @@protoc_insertion_point(field_unsafe_arena_release:mgw.MgwMsg.result)
  if (_internal_has_result()) {
    clear_has_message();
    ::mgw::ReqResult* temp = message_.result_;
    message_.result_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void MgwMsg::unsafe_arena_set_allocated_result(::mgw::ReqResult* result) {
  clear_message();
  if (result) {
    set_has_result();
    message_.result_ = result;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mgw.MgwMsg.result)
}
inline ::mgw::ReqResult* MgwMsg::_internal_mutable_result() {
  if (!_internal_has_result()) {
    clear_message();
    set_has_result();
    message_.result_ = CreateMaybeMessage< ::mgw::ReqResult >(GetArena());
  }
  return message_.result_;
}
inline ::mgw::ReqResult* MgwMsg::mutable_result() {
  // @@protoc_insertion_point(field_mutable:mgw.MgwMsg.result)
  return _internal_mutable_result();
}

// .mgw.StreamInfo stream_info = 22;
inline bool MgwMsg::_internal_has_stream_info() const {
  return message_case() == kStreamInfo;
}
inline bool MgwMsg::has_stream_info() const {
  return _internal_has_stream_info();
}
inline void MgwMsg::set_has_stream_info() {
  _oneof_case_[0] = kStreamInfo;
}
inline void MgwMsg::clear_stream_info() {
  if (_internal_has_stream_info()) {
    if (GetArena() == nullptr) {
      delete message_.stream_info_;
    }
    clear_has_message();
  }
}
inline ::mgw::StreamInfo* MgwMsg::release_stream_info() {
  // @@protoc_insertion_point(field_release:mgw.MgwMsg.stream_info)
  if (_internal_has_stream_info()) {
    clear_has_message();
      ::mgw::StreamInfo* temp = message_.stream_info_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    message_.stream_info_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::mgw::StreamInfo& MgwMsg::_internal_stream_info() const {
  return _internal_has_stream_info()
      ? *message_.stream_info_
      : reinterpret_cast< ::mgw::StreamInfo&>(::mgw::_StreamInfo_default_instance_);
}
inline const ::mgw::StreamInfo& MgwMsg::stream_info() const {
  // @@protoc_insertion_point(field_get:mgw.MgwMsg.stream_info)
  return _internal_stream_info();
}
inline ::mgw::StreamInfo* MgwMsg::unsafe_arena_release_stream_info() {
  // @@protoc_insertion_point(field_unsafe_arena_release:mgw.MgwMsg.stream_info)
  if (_internal_has_stream_info()) {
    clear_has_message();
    ::mgw::StreamInfo* temp = message_.stream_info_;
    message_.stream_info_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void MgwMsg::unsafe_arena_set_allocated_stream_info(::mgw::StreamInfo* stream_info) {
  clear_message();
  if (stream_info) {
    set_has_stream_info();
    message_.stream_info_ = stream_info;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mgw.MgwMsg.stream_info)
}
inline ::mgw::StreamInfo* MgwMsg::_internal_mutable_stream_info() {
  if (!_internal_has_stream_info()) {
    clear_message();
    set_has_stream_info();
    message_.stream_info_ = CreateMaybeMessage< ::mgw::StreamInfo >(GetArena());
  }
  return message_.stream_info_;
}
inline ::mgw::StreamInfo* MgwMsg::mutable_stream_info() {
  // @@protoc_insertion_point(field_mutable:mgw.MgwMsg.stream_info)
  return _internal_mutable_stream_info();
}

inline bool MgwMsg::has_message() const {
  return message_case() != MESSAGE_NOT_SET;
}
inline void MgwMsg::clear_has_message() {
  _oneof_case_[0] = MESSAGE_NOT_SET;
}
inline MgwMsg::MessageCase MgwMsg::message_case() const {
  return MgwMsg::MessageCase(_oneof_case_[0]);
}
#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace mgw

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_mgw_2eproto
